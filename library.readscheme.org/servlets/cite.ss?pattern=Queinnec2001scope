<html><head><title>Citation: A typeful composition model for dynamic software architectures</title><link rel="stylesheet" href="../basic.css" type="text/css" /></head><body bgcolor="white"><table width="100%"><tr valign="top"><td width="124"><table width="124"><tr width="124" height="45"><td width="124" height="45"><a href="http://readscheme.org"><img width="124" height="45" border="0" alt="Readscheme.org" src="../nav-logo.gif" /></a></td></tr><tr width="124" height="124"><td width="124" height="124"><a href="../index.html" target="_top"><img width="124" height="124" border="0" alt="Scheme Bibliography Home" src="../nav_mainlogo.gif" /></a></td></tr><tr width="124" height="30"><td width="124" height="30"><a href="../page1.html" target="_top"><img width="124" height="30" border="0" alt="Classics" src="../nav_classics.gif" /></a></td></tr><tr width="124" height="18"><td width="124" height="18"><a href="../page2.html" target="_top"><img width="124" height="18" border="0" alt="Semantics" src="../nav_sem.gif" /></a></td></tr><tr width="124" height="18"><td width="124" height="18"><a href="../page3.html" target="_top"><img width="124" height="18" border="0" alt="Macros" src="../nav_macros.gif" /></a></td></tr><tr width="124" height="18"><td width="124" height="18"><a href="../page4.html" target="_top"><img width="124" height="18" border="0" alt="Objects" src="../nav_objects.gif" /></a></td></tr><tr width="124" height="30"><td width="124" height="30"><a href="../page5.html" target="_top"><img width="124" height="30" border="0" alt="Modules" src="../nav_modules.gif" /></a></td></tr><tr width="124" height="18"><td width="124" height="18"><a href="../page6.html" target="_top"><img width="124" height="18" border="0" alt="Continuations" src="../nav_cps.gif" /></a></td></tr><tr width="124" height="30"><td width="124" height="30"><a href="../pagexml.html" target="_top"><img width="124" height="30" border="0" alt="Web Programming" src="../nav_xml.gif" /></a></td></tr><tr width="124" height="18"><td width="124" height="18"><a href="../page7.html" target="_top"><img width="124" height="18" border="0" alt="Applications" src="../nav_appl.gif" /></a></td></tr><tr width="124" height="18"><td width="124" height="18"><a href="../page8.html" target="_top"><img width="124" height="18" border="0" alt="Implementation" src="../nav_impl.gif" /></a></td></tr><tr width="124" height="30"><td width="124" height="30"><a href="../page9.html" target="_top"><img width="124" height="30" border="0" alt="Concurrent Programming" src="../nav_conc.gif" /></a></td></tr><tr width="124" height="30"><td width="124" height="30"><a href="../page10.html" target="_top"><img width="124" height="30" border="0" alt="Partial Evaluation" src="../nav_pe.gif" /></a></td></tr><tr width="124" height="18"><td width="124" height="18"><a href="../page11.html" target="_top"><img width="124" height="18" border="0" alt="Reflection" src="../nav_reflect.gif" /></a></td></tr><tr width="124" height="30"><td width="124" height="30"><a href="../whats_new.html" target="_top"><img width="124" height="30" border="0" alt="Recent Additions" src="../nav_recent.gif" /></a></td></tr><tr width="124" height="30"><td width="124" height="30"><a href="../browse.html" target="_top"><img width="124" height="30" border="0" alt="Browse by Author" src="../nav_browse.gif" /></a></td></tr><tr width="124" height="18"><td width="124" height="18"><a href="../search.html" target="_top"><img width="124" height="18" border="0" alt="Search..." src="../nav_search.gif" /></a></td></tr></table></td><td width="20"><img width="20" height="1" border="0" src="../imgs/dot_clear.gif" /></td><td><h2>A typeful composition model for dynamic software architectures</h2><h3>Frédéric Peschanski, Christian Queinnec and Jean-Pierre Briot</h3><p><u>Abstract:</u></p><p>Future generations of software systems should be able to evolve consistently  while they are running. To address this problem, we propose a model and a  domain-specific language, named Scope, that offers the dynamic composition of component-based software architectures. The basic constitutive operation  available is the establishment of a connection between two given composnents.  Interconnected components can exchange information in the form of anonymous  event emissions. Event types are used in our work both to capture  programmer's intentions at the conceptual level and to ensure type safety at  the operational level. A type inference algorithm maps these two levels. Compositions can be flat or recursive, the result being an architecture or a  composite component. Language-level extensions are proposed through type  confinement, connection labelling and component refinement.</p><p><u>Downloads:</u></p><ul><li><a href="http://www-spi.lip6.fr/~queinnec/Papers/scope-report2001.ps.gz">ps</a></li><li><a href="http://www-spi.lip6.fr/~queinnec/PDF/scope-report2001.pdf">pdf</a></li></ul><p><u>Bibtex citation:</u></p><pre>@unpublished{
   key = "Queinnec2001scope"
   author = "Frédéric Peschanski, Christian Queinnec and Jean-Pierre Briot"
   title = "A typeful composition model for dynamic software architectures"
   month = "July"
   year = "2001"
   url = "http://www-spi.lip6.fr/~queinnec/Papers/scope-report2001.ps.gz"
   url = "http://www-spi.lip6.fr/~queinnec/PDF/scope-report2001.pdf"
}
</pre></td></tr></table></body></html>